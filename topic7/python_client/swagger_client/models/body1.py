# coding: utf-8

"""
    Genedata

    API for interacting with gene records  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Body1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gene_id': 'str',
        'entity': 'str',
        'start': 'int',
        'stop': 'int',
        'sense': 'str',
        'start_codon': 'str',
        'ec': 'ApigeneidEc',
        'sequencing': 'ApigeneidSequencing'
    }

    attribute_map = {
        'gene_id': 'gene_id',
        'entity': 'entity',
        'start': 'start',
        'stop': 'stop',
        'sense': 'sense',
        'start_codon': 'start_codon',
        'ec': 'ec',
        'sequencing': 'sequencing'
    }

    def __init__(self, gene_id=None, entity=None, start=None, stop=None, sense=None, start_codon=None, ec=None, sequencing=None):  # noqa: E501
        """Body1 - a model defined in Swagger"""  # noqa: E501
        self._gene_id = None
        self._entity = None
        self._start = None
        self._stop = None
        self._sense = None
        self._start_codon = None
        self._ec = None
        self._sequencing = None
        self.discriminator = None
        self.gene_id = gene_id
        self.entity = entity
        if start is not None:
            self.start = start
        if stop is not None:
            self.stop = stop
        self.sense = sense
        if start_codon is not None:
            self.start_codon = start_codon
        self.ec = ec
        self.sequencing = sequencing

    @property
    def gene_id(self):
        """Gets the gene_id of this Body1.  # noqa: E501


        :return: The gene_id of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._gene_id

    @gene_id.setter
    def gene_id(self, gene_id):
        """Sets the gene_id of this Body1.


        :param gene_id: The gene_id of this Body1.  # noqa: E501
        :type: str
        """
        if gene_id is None:
            raise ValueError("Invalid value for `gene_id`, must not be `None`")  # noqa: E501

        self._gene_id = gene_id

    @property
    def entity(self):
        """Gets the entity of this Body1.  # noqa: E501


        :return: The entity of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this Body1.


        :param entity: The entity of this Body1.  # noqa: E501
        :type: str
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")  # noqa: E501

        self._entity = entity

    @property
    def start(self):
        """Gets the start of this Body1.  # noqa: E501


        :return: The start of this Body1.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Body1.


        :param start: The start of this Body1.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def stop(self):
        """Gets the stop of this Body1.  # noqa: E501


        :return: The stop of this Body1.  # noqa: E501
        :rtype: int
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """Sets the stop of this Body1.


        :param stop: The stop of this Body1.  # noqa: E501
        :type: int
        """

        self._stop = stop

    @property
    def sense(self):
        """Gets the sense of this Body1.  # noqa: E501


        :return: The sense of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._sense

    @sense.setter
    def sense(self, sense):
        """Sets the sense of this Body1.


        :param sense: The sense of this Body1.  # noqa: E501
        :type: str
        """
        if sense is None:
            raise ValueError("Invalid value for `sense`, must not be `None`")  # noqa: E501

        self._sense = sense

    @property
    def start_codon(self):
        """Gets the start_codon of this Body1.  # noqa: E501


        :return: The start_codon of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._start_codon

    @start_codon.setter
    def start_codon(self, start_codon):
        """Sets the start_codon of this Body1.


        :param start_codon: The start_codon of this Body1.  # noqa: E501
        :type: str
        """

        self._start_codon = start_codon

    @property
    def ec(self):
        """Gets the ec of this Body1.  # noqa: E501


        :return: The ec of this Body1.  # noqa: E501
        :rtype: ApigeneidEc
        """
        return self._ec

    @ec.setter
    def ec(self, ec):
        """Sets the ec of this Body1.


        :param ec: The ec of this Body1.  # noqa: E501
        :type: ApigeneidEc
        """
        if ec is None:
            raise ValueError("Invalid value for `ec`, must not be `None`")  # noqa: E501

        self._ec = ec

    @property
    def sequencing(self):
        """Gets the sequencing of this Body1.  # noqa: E501


        :return: The sequencing of this Body1.  # noqa: E501
        :rtype: ApigeneidSequencing
        """
        return self._sequencing

    @sequencing.setter
    def sequencing(self, sequencing):
        """Sets the sequencing of this Body1.


        :param sequencing: The sequencing of this Body1.  # noqa: E501
        :type: ApigeneidSequencing
        """
        if sequencing is None:
            raise ValueError("Invalid value for `sequencing`, must not be `None`")  # noqa: E501

        self._sequencing = sequencing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
