"""
Django settings for social project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

# I wrote this code to set environment variables
import os
import dotenv
from pathlib import Path
from whitenoise.middleware import WhiteNoiseMiddleware
# end of code I wrote

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# I wrote this code
# I used this for deployment to Heroku so as to follow the guideline stated
# in django documentation above
dotenv.load_dotenv()

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG') == 'True'

APPEND_SLASH = False

ALLOWED_HOSTS = [
    # Allow localhost:3000 for the frontend
    '127.0.0.1',
    'social-be-6dee029da670.herokuapp.com'
]

import cloudinary

# Todo: Update cloudinary config to use environment variables
cloudinary.config(
  cloud_name = "dddzjpoew",
  api_key = "426121238726195",
  api_secret = "ZpuXFW-CBj78xEvMSwVWgvDH-UE",
  # folder to store images
  folder = "social"
)

# Application definition

INSTALLED_APPS = [
    'daphne', # For websocket
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions', 
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', # For API
    'rest_framework.authtoken', # For authentication token
    # 'social.auth.SocialConfig', # For social app
    'authn', # For auth app,
    'timeline', # For timeline app
    'friend', # For friend app
    'chat',


]

# Update to use custom user model instead of default user model set by django
AUTH_USER_MODEL = 'authn.User' 


# This code sets the DEFAULT_PERMISSION_CLASSES setting to allow any user to 
# access the API, and sets the DEFAULT_AUTHENTICATION_CLASSES setting to use 
# SessionAuthentication instead of TokenAuthentication. This allows 
# unauthenticated access to the /register/ endpoint.
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'authn.token.BearerTokenAuthentication', # I used Bearer token instead of Token token
        # 'rest_framework.authentication.TokenAuthentication',
    ],
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated',
    # ],
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 10,
    'EXCEPTION_HANDLER': 'social.utils.custom_exception_handler'

}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    # It's recommended that CorsMiddleware should be placed as high as possible
    # , especially before any middleware that can generate responses such as 
    # Django's CommonMiddleware or Whitenoise's WhiteNoiseMiddleware. 
    # If it is not before, it will not be able to add the CORS headers to 
    # these responses.
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # For static files
    'social.middleware.JsonErrorHandlerMiddleware', # For custom error handling

]

ROOT_URLCONF = 'social.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'social.wsgi.application'
# Add this line inorder to use daphne instead of gunicorn
ASGI_APPLICATION = "social.asgi.application"
# ASGI_APPLICATION = "social.routing.application"


CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('localhost', 6379)],
        },
    },
}



# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
    # Update to use postgres instead of sqlite for production
    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql_psycopg2',
    #     'NAME': 'bioweb_db',
    #     'USER': 'postgres',
    #     'PASSWORD': 'root',
    #     'HOST': 'localhost',
    #     'PORT': '5432',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# I wrote this code using the guideline stated in django doc above
# Set the URL for static files
STATIC_URL = 'static/'

# Set the root directory for static files
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Use the CompressedManifestStaticFilesStorage storage backend for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
# end of code I wrote

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Set cors allowed origins
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]